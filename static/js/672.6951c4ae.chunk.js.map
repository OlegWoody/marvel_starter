{"version":3,"file":"static/js/672.6951c4ae.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/SinglePage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () =>{\r\n    return (\r\n        <img style={{display:'block', width: '250px', height: '250px', objectFit: 'contain', margin:'0 auto'}}\r\n        src={img} alt='error img'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './singleComicPage.scss';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport { useState, useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\nimport { Helmet } from 'react-helmet';\r\n\r\n\r\nconst SinglePage = () => {\r\n    \r\n    const {comicId, charId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n    const [char, setChar] = useState(null)\r\n    const {loading,error, clearError, getComics,getCharacter} = useMarvelService()\r\n    useEffect(()=>{\r\n        updateComic()\r\n    }, [comicId, charId]);\r\n\r\n    const updateComic = () =>{\r\n        if(comicId){\r\n            getComics(comicId)\r\n            .then(onComicLoaded)\r\n        } else if(charId){\r\n            console.log(charId)\r\n            getCharacter(charId)\r\n            .then(onCharLoaded)\r\n        }\r\n    }\r\n\r\n    const onComicLoaded = (comic) =>{\r\n        setComic(comic)\r\n    }\r\n\r\n    const onCharLoaded = (char) =>{\r\n        setChar(char)\r\n    }\r\n\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null\r\n    const spinner = loading  ? <Spinner/> : null\r\n    const content = !(loading || error || !comic) ? <ViewComic comic={comic}/> : !(loading || error || !char) ? <ViewChar char={char}/> : null\r\n\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst ViewComic = ({comic}) =>{\r\n    const {id,name,price,thumbnail,description,pageCount,language} = comic\r\n    return(\r\n        <div key={id} className=\"single-comic\">\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`${name} comics book`}\r\n                    />\r\n                <title>{name}</title>\r\n            </Helmet>\r\n            <img src={thumbnail} alt={name} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{name}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ViewChar =({char}) =>{\r\n    const {id,name,description,thumbnail} = char\r\n\r\n    return(\r\n        <div key={id} className='single-comic'>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content={`${name} charapter of comics`}\r\n                    />\r\n                <title>{name}</title>\r\n            </Helmet>\r\n            <img src={thumbnail} alt={name} className='single-comic__char-img'/>\r\n            <div>\r\n                <h2 className='single-comic__char-name'>{name}</h2>\r\n                <p className='single-comic__char-descr'>{description}</p>\r\n            </div>\r\n            <Link to='/' className=\"single-comic__back\">Back to list</Link>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SinglePage;","import {useCallback, useState} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [status, setStatus] = useState(\"waiting\")\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true)\r\n        setStatus(\"loading\")\r\n        try{\r\n            const response = await fetch(url, {method, body, headers})\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n        const clearError = useCallback(()=>{\r\n            setError(null)\r\n            setStatus(\"waiting\")\r\n        }, [])\r\n\r\n        return {loading, error, clearError, request, status, setStatus}\r\n}","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService=()=>{\r\n    const {loading, request, error, clearError, status, setStatus} = useHttp()\r\n    // _apiBase='https://gateway.marvel.com:443/v1/public/characters';\r\n    const _apiBase='https://gateway.marvel.com:443/v1/public/';\r\n    // _apiKey='apikey=4a1cee68a845fc20042b5dc8b9523728';\r\n    const _apiKey='apikey=729b5cdb5d9dcfb32ca407c6c566b080';\r\n    const _baseOffset = 210;\r\n\r\n    const getCharacterByName = async(name) =>{\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        return res.data.results\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            homepage: comic.urls[0].url,\r\n            name: comic.title,\r\n\t\t\tprice: comic.prices[0].price\r\n\t\t\t\t? `${comic.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n            thumbnail: comic.thumbnail.path + `.` + comic.thumbnail.extension,\r\n            description: comic.description || \"There is no description\",\r\n            pageCount: comic.pageCount\r\n            ? `${comic.pageCount} p.`\r\n            : \"No information about the number of pages\",\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        if(!char){\r\n            return {error: true}\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {status, \r\n        setStatus,\r\n        loading,\r\n        error, \r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter, \r\n        getAllComics, \r\n        getComics, \r\n        getCharacterByName\r\n    }\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","ViewComic","_ref","comic","id","name","price","thumbnail","description","pageCount","language","_jsxs","className","children","Helmet","content","concat","Link","to","ViewChar","_ref2","char","SinglePage","comicId","charId","useParams","setComic","useState","setChar","loading","error","clearError","getComics","getCharacter","useMarvelService","useEffect","updateComic","then","onComicLoaded","console","log","onCharLoaded","errorMessage","spinner","Spinner","_Fragment","request","status","setStatus","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","data","json","e","message","_apiBase","_apiKey","_transformComics","_comic$textObjects$","homepage","urls","title","prices","path","extension","textObjects","_transformCharacter","slice","wiki","comics","items","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName"],"sourceRoot":""}