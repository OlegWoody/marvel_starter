{"version":3,"file":"static/js/140.b6ab4b3a.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","utils/setStatus.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/searchForm/SearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () =>{\r\n    return (\r\n        <img style={{display:'block', width: '250px', height: '250px', objectFit: 'contain', margin:'0 auto'}}\r\n        src={img} alt='error img'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    const {loading, error, getCharacter, clearError} = useMarvelService()\n\n    const [char, setChar] = useState(null);\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId)\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError()\n        const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst setStatusChar = (status, Component, newItemLoading) =>{\n    switch(status){\n        case\"waiting\":\n            return <Spinner/>\n            break;\n        case \"loading\":\n            return newItemLoading ? <Component/> : <Spinner/>\n            break;\n        case \"confirned\":\n            return <Component/>\n            break;\n        case \"error\":\n            return <ErrorMessage/>\n            break;\n        default:\n            throw new Error(`Status is ${status}`)\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    const [inProp, setInProp] = useState(false)\n\n    const {loading, error, getAllCharacters, status, setStatus} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setInProp(true))\n            .then(()=>setStatus(\"confirned\"))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n\n\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition nodeRef={itemRefs.i} inProp={inProp} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n                <ul className=\"char__grid\">\n                    <TransitionGroup component={null}>\n                        {items} \n                    </TransitionGroup>\n                </ul>\n        )\n    }\n    \n\n    return (\n        <div className=\"char__list\">\n            {setStatusChar(status, ()=> renderItems(charList), newItemLoading)}\n\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setStatusChar = (status, Component, data) =>{\r\n    switch(status){\r\n        case\"waiting\":\r\n            return <Skeleton/>\r\n            break;\r\n        case \"loading\":\r\n            return <Spinner/>\r\n            break;\r\n        case \"confirned\":\r\n            return <Component data={data}/>\r\n            break;\r\n        case \"error\":\r\n            return <ErrorMessage/>\r\n            break;\r\n        default:\r\n            throw new Error(`Status is ${status}`)\r\n    }\r\n}\r\n\r\nexport default setStatusChar;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setStatusChar from '../../utils/setStatus';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const {loading, error, getCharacter, clearError, status, setStatus} = useMarvelService()\n\n    const [char, setChar] = useState(null);\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(()=>setStatus(\"confirned\"))\n    }\n\n    const onCharLoaded = (char) => {\n        console.log(1)\n        setChar(char);\n    }\n\n\n    // const skeleton = char || loading || error ? null : <Skeleton/>;\n    // const errorMessage = error ? <ErrorMessage/> : null;\n    // const spinner = loading ? <Spinner/> : null;\n    // const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {/* {skeleton}\n            {errorMessage}\n            {spinner}\n            {content} */}\n            {setStatusChar(status, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {Component} from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state={\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo){\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n    render (){\r\n        if(this.state.error){\r\n            return <ErrorMessage/>\r\n        } \r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import \"./searchForm.scss\"\r\nimport useMarvelService from \"../../services/MarvelService\"\r\nimport { useState } from \"react\";\r\nimport {Form, Field, Formik, ErrorMessage as FormikErrorMessage} from \"formik\"\r\nimport * as Yup from 'yup'\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst SearchForm = () => {\r\n    const [char, setChar] = useState(null)\r\n\r\n    const {getCharacterByName, loading, error, clearError} = useMarvelService()\r\n\r\n    const sendChar = (value) =>{\r\n        clearError()\r\n        getCharacterByName(value)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded = (char) =>{\r\n        setChar(char)\r\n        console.log(char)\r\n    }\r\n\r\n    const result = !char ? null : char[0].name ?\r\n            <div className=\"char__search-wrapper\">\r\n                <div className=\"char__search-success\">There is! Visit \"{char[0].name}\" page?</div>\r\n                <Link to={`/charapter/${char[0].id}`} className=\"button button__secondary\">\r\n                    <div className=\"char__search-label\">Visit</div>\r\n                </Link> \r\n            </div> : <div className=\"char__search-error\">Charapter is not founded</div>\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{nameChar:''}}\r\n                validationSchema={Yup.object({\r\n                    nameChar: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={\r\n                    ({nameChar})=>sendChar(nameChar)\r\n                }\r\n            >\r\n                <Form>\r\n                    <label htmlFor=\"nameChar\" className=\"char__search-label\">\r\n                        Fing a character by name:\r\n                    </label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"nameChar\"\r\n                            type=\"text\"\r\n                            name=\"nameChar\"\r\n                            placeholder=\"Enter name\"\r\n                        />\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\" >Search</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"nameChar\"/>\r\n                </Form>\r\n            </Formik>\r\n            {result}\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default SearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport SearchForm from \"../searchForm/SearchForm\";\r\n\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () =>{\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>    \r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                            <SearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useCallback, useState} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(false);\r\n    const [status, setStatus] = useState(\"waiting\")\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true)\r\n        setStatus(\"loading\")\r\n        try{\r\n            const response = await fetch(url, {method, body, headers})\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n        const clearError = useCallback(()=>{\r\n            setError(null)\r\n            setStatus(\"waiting\")\r\n        }, [])\r\n\r\n        return {loading, error, clearError, request, status, setStatus}\r\n}","import {useHttp} from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService=()=>{\r\n    const {loading, request, error, clearError, status, setStatus} = useHttp()\r\n    // _apiBase='https://gateway.marvel.com:443/v1/public/characters';\r\n    const _apiBase='https://gateway.marvel.com:443/v1/public/';\r\n    // _apiKey='apikey=4a1cee68a845fc20042b5dc8b9523728';\r\n    const _apiKey='apikey=729b5cdb5d9dcfb32ca407c6c566b080';\r\n    const _baseOffset = 210;\r\n\r\n    const getCharacterByName = async(name) =>{\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`)\r\n        return res.data.results\r\n    }\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getComics = async (id) => {\r\n\t\tconst res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n\t\treturn _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            homepage: comic.urls[0].url,\r\n            name: comic.title,\r\n\t\t\tprice: comic.prices[0].price\r\n\t\t\t\t? `${comic.prices[0].price}$`\r\n\t\t\t\t: \"not available\",\r\n            thumbnail: comic.thumbnail.path + `.` + comic.thumbnail.extension,\r\n            description: comic.description || \"There is no description\",\r\n            pageCount: comic.pageCount\r\n            ? `${comic.pageCount} p.`\r\n            : \"No information about the number of pages\",\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        if(!char){\r\n            return {error: true}\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {status, \r\n        setStatus,\r\n        loading,\r\n        error, \r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter, \r\n        getAllComics, \r\n        getComics, \r\n        getCharacterByName\r\n    }\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","loading","error","getCharacter","clearError","useMarvelService","setChar","useState","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","setStatusChar","status","Component","newItemLoading","Error","concat","props","charList","setCharList","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","inProp","setInProp","getAllCharacters","setStatus","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","items","map","i","CSSTransition","nodeRef","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","_Fragment","data","comics","charId","console","log","ErrorBoundary","constructor","arguments","state","componentDidCatch","errorInfo","this","setState","render","SearchForm","getCharacterByName","result","Link","to","Formik","initialValues","nameChar","validationSchema","Yup","required","onSubmit","value","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","MainPage","selectedChar","Helmet","CharList","CharInfo","decoration","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","json","message","_apiBase","_apiKey","_transformComics","comic","_comic$textObjects$","urls","title","price","prices","path","extension","pageCount","language","textObjects","_transformCharacter","slice","results","res","getAllComics","getComics"],"sourceRoot":""}